<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/tx 
       http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/context 
       http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.springframework.org/schema/task
       http://www.springframework.org/schema/task/spring-task.xsd">

    <!--spring 加载配置文件-->
    <context:property-placeholder location="classpath:properties/jdbc.properties"/>
    <bean id="properties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="locations">
            <list>
                <value>classpath:properties/jdbc.properties</value>
                <value>classpath:properties/redis.properties</value>
                <value>classpath:properties/qi_niu.properties</value>
                <value>classpath:properties/machine.properties</value>
            </list>
        </property>
    </bean>

    <!-- 用注释进行以来注入 -->
    <context:annotation-config></context:annotation-config>
    <!-- 用注释让Spring管理Bean -->
    <context:component-scan base-package="zjobs" use-default-filters="true"></context:component-scan>


    <!-- spring系统启动以后，加载该类，主要作用是加载字典等信息
    <zjobs.entity class="zjobs.init.InitDataListener"/>-->

    <bean id="freemarkerConfig" name="freemarkerConfig"
          class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
        <property name="templateLoaderPath" value="/WEB-INF/ftl/"/>
        <property name="defaultEncoding" value="utf-8"/>
        <property name="freemarkerSettings">
            <props>
                <prop key="template_update_delay">0</prop>
            </props>
        </property>
    </bean>

    <bean id="SpringContext" class="zjobs.context.SpringContext" scope="singleton" lazy-init="false"/>


    <!-- 基于注解方式的事物管理 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- 文件上传解析器-->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="10485760"/><!--10M-->
        <property name="maxInMemorySize" value="10240"/>
    </bean>

    <!--在abstractService中注入线程池，需要测试是否有效-->
    <bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <!-- 核心线程数 -->
        <property name="corePoolSize" value="4"/>
        <!-- 最大线程数 -->
        <property name="maxPoolSize" value="50"/>
        <!-- 线程池所使用的缓冲队列最大长度 -->
        <property name="queueCapacity" value="1000"/>
        <!-- 线程池维护线程所允许的空闲时间，默认为60s -->
        <property name="keepAliveSeconds" value="60"/>
    </bean>
    <!-- 注解式 -->
    <task:annotation-driven/>


    <!-- 配置quartz调度器 -->
    <bean id="scheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!--可选，QuartzScheduler 启动时更新己存在的Job，这样就不用每次修改targetObject后删除qrtz_job_details表对应记录了 -->
        <property name="overwriteExistingJobs" value="true"/>
        <!--必须的，QuartzScheduler 延时启动，应用启动完后 QuartzScheduler 再启动 -->
        <property name="startupDelay" value="3"/>
        <!-- 设置自动启动 -->
        <property name="autoStartup" value="true"/>
        <!-- 把spring上下 文以key/value的方式存放在了quartz的上下文中了 -->
        <property name="applicationContextSchedulerContextKey" value="applicationContext"/>
        <!-- scheduler的名称 -->
        <property name="schedulerName" value="ClusterScheduler"/>
        <property name="configLocation" value="classpath:properties/quartz.properties"/>
    </bean>


    <import resource="classpath:spring-redis.xml"/>
    <import resource="classpath:spring_Mybatis.xml"/>
</beans>
